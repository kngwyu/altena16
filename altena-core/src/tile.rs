//! color, tile

use ansi_term::Style;
use ansi_term::Colour as TermRGB;
use image::{Primitive, Rgba};
use num_traits::ToPrimitive;
use rect_iter::{Get2D, GetMut2D};
use std::convert;
use std::fmt;

pub mod tiletypes {
    use euclid::TypedPoint2D;
    pub struct TileSpace;
    pub type TilePoint = TypedPoint2D<u8, TileSpace>;
    pub const TILE_SIZE: usize = 16;
}

use self::tiletypes::*;

#[derive(Clone, Copy, Debug, PartialEq, Eq)]
pub struct Alpha(pub u8);

impl Alpha {
    const BLEND_TABLE: [u8; 256 * 16] = [
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1,
        1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2,
        2, 3, 3, 3, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3,
        3, 4, 4, 4, 5, 5, 0, 0, 1, 1, 2, 2, 2, 3, 3, 4, 4, 4, 5, 5, 6, 6, 0, 0, 1, 1, 2, 2, 3, 3,
        4, 4, 5, 5, 6, 6, 7, 7, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 0, 1, 1, 2, 2, 3,
        4, 4, 5, 5, 6, 7, 7, 8, 8, 9, 0, 1, 1, 2, 3, 3, 4, 5, 5, 6, 7, 7, 8, 9, 9, 10, 0, 1, 1, 2,
        3, 4, 4, 5, 6, 7, 7, 8, 9, 10, 10, 11, 0, 1, 2, 2, 3, 4, 5, 6, 6, 7, 8, 9, 10, 10, 11, 12,
        0, 1, 2, 3, 3, 4, 5, 6, 7, 8, 9, 10, 10, 11, 12, 13, 0, 1, 2, 3, 4, 5, 6, 7, 7, 8, 9, 10,
        11, 12, 13, 14, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 0, 1, 2, 3, 4, 5, 6,
        7, 9, 10, 11, 12, 13, 14, 15, 16, 0, 1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 0,
        1, 2, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 16, 17, 18, 0, 1, 3, 4, 5, 6, 8, 9, 10, 11, 13,
        14, 15, 16, 18, 19, 0, 1, 3, 4, 5, 7, 8, 9, 11, 12, 13, 15, 16, 17, 19, 20, 0, 1, 3, 4, 6,
        7, 8, 10, 11, 13, 14, 15, 17, 18, 20, 21, 0, 1, 3, 4, 6, 7, 9, 10, 12, 13, 15, 16, 18, 19,
        21, 22, 0, 2, 3, 5, 6, 8, 9, 11, 12, 14, 15, 17, 18, 20, 21, 23, 0, 2, 3, 5, 6, 8, 10, 11,
        13, 14, 16, 18, 19, 21, 22, 24, 0, 2, 3, 5, 7, 8, 10, 12, 13, 15, 17, 18, 20, 22, 23, 25,
        0, 2, 3, 5, 7, 9, 10, 12, 14, 16, 17, 19, 21, 23, 24, 26, 0, 2, 4, 5, 7, 9, 11, 13, 14, 16,
        18, 20, 22, 23, 25, 27, 0, 2, 4, 6, 7, 9, 11, 13, 15, 17, 19, 21, 22, 24, 26, 28, 0, 2, 4,
        6, 8, 10, 12, 14, 15, 17, 19, 21, 23, 25, 27, 29, 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20,
        22, 24, 26, 28, 30, 0, 2, 4, 6, 8, 10, 12, 14, 17, 19, 21, 23, 25, 27, 29, 31, 0, 2, 4, 6,
        9, 11, 13, 15, 17, 19, 21, 23, 26, 28, 30, 32, 0, 2, 4, 7, 9, 11, 13, 15, 18, 20, 22, 24,
        26, 29, 31, 33, 0, 2, 5, 7, 9, 11, 14, 16, 18, 20, 23, 25, 27, 29, 32, 34, 0, 2, 5, 7, 9,
        12, 14, 16, 19, 21, 23, 26, 28, 30, 33, 35, 0, 2, 5, 7, 10, 12, 14, 17, 19, 22, 24, 26, 29,
        31, 34, 36, 0, 2, 5, 7, 10, 12, 15, 17, 20, 22, 25, 27, 30, 32, 35, 37, 0, 3, 5, 8, 10, 13,
        15, 18, 20, 23, 25, 28, 30, 33, 35, 38, 0, 3, 5, 8, 10, 13, 16, 18, 21, 23, 26, 29, 31, 34,
        36, 39, 0, 3, 5, 8, 11, 13, 16, 19, 21, 24, 27, 29, 32, 35, 37, 40, 0, 3, 5, 8, 11, 14, 16,
        19, 22, 25, 27, 30, 33, 36, 38, 41, 0, 3, 6, 8, 11, 14, 17, 20, 22, 25, 28, 31, 34, 36, 39,
        42, 0, 3, 6, 9, 11, 14, 17, 20, 23, 26, 29, 32, 34, 37, 40, 43, 0, 3, 6, 9, 12, 15, 18, 21,
        23, 26, 29, 32, 35, 38, 41, 44, 0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42, 45,
        0, 3, 6, 9, 12, 15, 18, 21, 25, 28, 31, 34, 37, 40, 43, 46, 0, 3, 6, 9, 13, 16, 19, 22, 25,
        28, 31, 34, 38, 41, 44, 47, 0, 3, 6, 10, 13, 16, 19, 22, 26, 29, 32, 35, 38, 42, 45, 48, 0,
        3, 7, 10, 13, 16, 20, 23, 26, 29, 33, 36, 39, 42, 46, 49, 0, 3, 7, 10, 13, 17, 20, 23, 27,
        30, 33, 37, 40, 43, 47, 50, 0, 3, 7, 10, 14, 17, 20, 24, 27, 31, 34, 37, 41, 44, 48, 51, 0,
        3, 7, 10, 14, 17, 21, 24, 28, 31, 35, 38, 42, 45, 49, 52, 0, 4, 7, 11, 14, 18, 21, 25, 28,
        32, 35, 39, 42, 46, 49, 53, 0, 4, 7, 11, 14, 18, 22, 25, 29, 32, 36, 40, 43, 47, 50, 54, 0,
        4, 7, 11, 15, 18, 22, 26, 29, 33, 37, 40, 44, 48, 51, 55, 0, 4, 7, 11, 15, 19, 22, 26, 30,
        34, 37, 41, 45, 49, 52, 56, 0, 4, 8, 11, 15, 19, 23, 27, 30, 34, 38, 42, 46, 49, 53, 57, 0,
        4, 8, 12, 15, 19, 23, 27, 31, 35, 39, 43, 46, 50, 54, 58, 0, 4, 8, 12, 16, 20, 24, 28, 31,
        35, 39, 43, 47, 51, 55, 59, 0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 0,
        4, 8, 12, 16, 20, 24, 28, 33, 37, 41, 45, 49, 53, 57, 61, 0, 4, 8, 12, 17, 21, 25, 29, 33,
        37, 41, 45, 50, 54, 58, 62, 0, 4, 8, 13, 17, 21, 25, 29, 34, 38, 42, 46, 50, 55, 59, 63, 0,
        4, 9, 13, 17, 21, 26, 30, 34, 38, 43, 47, 51, 55, 60, 64, 0, 4, 9, 13, 17, 22, 26, 30, 35,
        39, 43, 48, 52, 56, 61, 65, 0, 4, 9, 13, 18, 22, 26, 31, 35, 40, 44, 48, 53, 57, 62, 66, 0,
        4, 9, 13, 18, 22, 27, 31, 36, 40, 45, 49, 54, 58, 63, 67, 0, 5, 9, 14, 18, 23, 27, 32, 36,
        41, 45, 50, 54, 59, 63, 68, 0, 5, 9, 14, 18, 23, 28, 32, 37, 41, 46, 51, 55, 60, 64, 69, 0,
        5, 9, 14, 19, 23, 28, 33, 37, 42, 47, 51, 56, 61, 65, 70, 0, 5, 9, 14, 19, 24, 28, 33, 38,
        43, 47, 52, 57, 62, 66, 71, 0, 5, 10, 14, 19, 24, 29, 34, 38, 43, 48, 53, 58, 62, 67, 72,
        0, 5, 10, 15, 19, 24, 29, 34, 39, 44, 49, 54, 58, 63, 68, 73, 0, 5, 10, 15, 20, 25, 30, 35,
        39, 44, 49, 54, 59, 64, 69, 74, 0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70,
        75, 0, 5, 10, 15, 20, 25, 30, 35, 41, 46, 51, 56, 61, 66, 71, 76, 0, 5, 10, 15, 21, 26, 31,
        36, 41, 46, 51, 56, 62, 67, 72, 77, 0, 5, 10, 16, 21, 26, 31, 36, 42, 47, 52, 57, 62, 68,
        73, 78, 0, 5, 11, 16, 21, 26, 32, 37, 42, 47, 53, 58, 63, 68, 74, 79, 0, 5, 11, 16, 21, 27,
        32, 37, 43, 48, 53, 59, 64, 69, 75, 80, 0, 5, 11, 16, 22, 27, 32, 38, 43, 49, 54, 59, 65,
        70, 76, 81, 0, 5, 11, 16, 22, 27, 33, 38, 44, 49, 55, 60, 66, 71, 77, 82, 0, 6, 11, 17, 22,
        28, 33, 39, 44, 50, 55, 61, 66, 72, 77, 83, 0, 6, 11, 17, 22, 28, 34, 39, 45, 50, 56, 62,
        67, 73, 78, 84, 0, 6, 11, 17, 23, 28, 34, 40, 45, 51, 57, 62, 68, 74, 79, 85, 0, 6, 11, 17,
        23, 29, 34, 40, 46, 52, 57, 63, 69, 75, 80, 86, 0, 6, 12, 17, 23, 29, 35, 41, 46, 52, 58,
        64, 70, 75, 81, 87, 0, 6, 12, 18, 23, 29, 35, 41, 47, 53, 59, 65, 70, 76, 82, 88, 0, 6, 12,
        18, 24, 30, 36, 42, 47, 53, 59, 65, 71, 77, 83, 89, 0, 6, 12, 18, 24, 30, 36, 42, 48, 54,
        60, 66, 72, 78, 84, 90, 0, 6, 12, 18, 24, 30, 36, 42, 49, 55, 61, 67, 73, 79, 85, 91, 0, 6,
        12, 18, 25, 31, 37, 43, 49, 55, 61, 67, 74, 80, 86, 92, 0, 6, 12, 19, 25, 31, 37, 43, 50,
        56, 62, 68, 74, 81, 87, 93, 0, 6, 13, 19, 25, 31, 38, 44, 50, 56, 63, 69, 75, 81, 88, 94,
        0, 6, 13, 19, 25, 32, 38, 44, 51, 57, 63, 70, 76, 82, 89, 95, 0, 6, 13, 19, 26, 32, 38, 45,
        51, 58, 64, 70, 77, 83, 90, 96, 0, 6, 13, 19, 26, 32, 39, 45, 52, 58, 65, 71, 78, 84, 91,
        97, 0, 7, 13, 20, 26, 33, 39, 46, 52, 59, 65, 72, 78, 85, 91, 98, 0, 7, 13, 20, 26, 33, 40,
        46, 53, 59, 66, 73, 79, 86, 92, 99, 0, 7, 13, 20, 27, 33, 40, 47, 53, 60, 67, 73, 80, 87,
        93, 100, 0, 7, 13, 20, 27, 34, 40, 47, 54, 61, 67, 74, 81, 88, 94, 101, 0, 7, 14, 20, 27,
        34, 41, 48, 54, 61, 68, 75, 82, 88, 95, 102, 0, 7, 14, 21, 27, 34, 41, 48, 55, 62, 69, 76,
        82, 89, 96, 103, 0, 7, 14, 21, 28, 35, 42, 49, 55, 62, 69, 76, 83, 90, 97, 104, 0, 7, 14,
        21, 28, 35, 42, 49, 56, 63, 70, 77, 84, 91, 98, 105, 0, 7, 14, 21, 28, 35, 42, 49, 57, 64,
        71, 78, 85, 92, 99, 106, 0, 7, 14, 21, 29, 36, 43, 50, 57, 64, 71, 78, 86, 93, 100, 107, 0,
        7, 14, 22, 29, 36, 43, 50, 58, 65, 72, 79, 86, 94, 101, 108, 0, 7, 15, 22, 29, 36, 44, 51,
        58, 65, 73, 80, 87, 94, 102, 109, 0, 7, 15, 22, 29, 37, 44, 51, 59, 66, 73, 81, 88, 95,
        103, 110, 0, 7, 15, 22, 30, 37, 44, 52, 59, 67, 74, 81, 89, 96, 104, 111, 0, 7, 15, 22, 30,
        37, 45, 52, 60, 67, 75, 82, 90, 97, 105, 112, 0, 8, 15, 23, 30, 38, 45, 53, 60, 68, 75, 83,
        90, 98, 105, 113, 0, 8, 15, 23, 30, 38, 46, 53, 61, 68, 76, 84, 91, 99, 106, 114, 0, 8, 15,
        23, 31, 38, 46, 54, 61, 69, 77, 84, 92, 100, 107, 115, 0, 8, 15, 23, 31, 39, 46, 54, 62,
        70, 77, 85, 93, 101, 108, 116, 0, 8, 16, 23, 31, 39, 47, 55, 62, 70, 78, 86, 94, 101, 109,
        117, 0, 8, 16, 24, 31, 39, 47, 55, 63, 71, 79, 87, 94, 102, 110, 118, 0, 8, 16, 24, 32, 40,
        48, 56, 63, 71, 79, 87, 95, 103, 111, 119, 0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88,
        96, 104, 112, 120, 0, 8, 16, 24, 32, 40, 48, 56, 65, 73, 81, 89, 97, 105, 113, 121, 0, 8,
        16, 24, 33, 41, 49, 57, 65, 73, 81, 89, 98, 106, 114, 122, 0, 8, 16, 25, 33, 41, 49, 57,
        66, 74, 82, 90, 98, 107, 115, 123, 0, 8, 17, 25, 33, 41, 50, 58, 66, 74, 83, 91, 99, 107,
        116, 124, 0, 8, 17, 25, 33, 42, 50, 58, 67, 75, 83, 92, 100, 108, 117, 125, 0, 8, 17, 25,
        34, 42, 50, 59, 67, 76, 84, 92, 101, 109, 118, 126, 0, 8, 17, 25, 34, 42, 51, 59, 68, 76,
        85, 93, 102, 110, 119, 127, 0, 9, 17, 26, 34, 43, 51, 60, 68, 77, 85, 94, 102, 111, 119,
        128, 0, 9, 17, 26, 34, 43, 52, 60, 69, 77, 86, 95, 103, 112, 120, 129, 0, 9, 17, 26, 35,
        43, 52, 61, 69, 78, 87, 95, 104, 113, 121, 130, 0, 9, 17, 26, 35, 44, 52, 61, 70, 79, 87,
        96, 105, 114, 122, 131, 0, 9, 18, 26, 35, 44, 53, 62, 70, 79, 88, 97, 106, 114, 123, 132,
        0, 9, 18, 27, 35, 44, 53, 62, 71, 80, 89, 98, 106, 115, 124, 133, 0, 9, 18, 27, 36, 45, 54,
        63, 71, 80, 89, 98, 107, 116, 125, 134, 0, 9, 18, 27, 36, 45, 54, 63, 72, 81, 90, 99, 108,
        117, 126, 135, 0, 9, 18, 27, 36, 45, 54, 63, 73, 82, 91, 100, 109, 118, 127, 136, 0, 9, 18,
        27, 37, 46, 55, 64, 73, 82, 91, 100, 110, 119, 128, 137, 0, 9, 18, 28, 37, 46, 55, 64, 74,
        83, 92, 101, 110, 120, 129, 138, 0, 9, 19, 28, 37, 46, 56, 65, 74, 83, 93, 102, 111, 120,
        130, 139, 0, 9, 19, 28, 37, 47, 56, 65, 75, 84, 93, 103, 112, 121, 131, 140, 0, 9, 19, 28,
        38, 47, 56, 66, 75, 85, 94, 103, 113, 122, 132, 141, 0, 9, 19, 28, 38, 47, 57, 66, 76, 85,
        95, 104, 114, 123, 133, 142, 0, 10, 19, 29, 38, 48, 57, 67, 76, 86, 95, 105, 114, 124, 133,
        143, 0, 10, 19, 29, 38, 48, 58, 67, 77, 86, 96, 106, 115, 125, 134, 144, 0, 10, 19, 29, 39,
        48, 58, 68, 77, 87, 97, 106, 116, 126, 135, 145, 0, 10, 19, 29, 39, 49, 58, 68, 78, 88, 97,
        107, 117, 127, 136, 146, 0, 10, 20, 29, 39, 49, 59, 69, 78, 88, 98, 108, 118, 127, 137,
        147, 0, 10, 20, 30, 39, 49, 59, 69, 79, 89, 99, 109, 118, 128, 138, 148, 0, 10, 20, 30, 40,
        50, 60, 70, 79, 89, 99, 109, 119, 129, 139, 149, 0, 10, 20, 30, 40, 50, 60, 70, 80, 90,
        100, 110, 120, 130, 140, 150, 0, 10, 20, 30, 40, 50, 60, 70, 81, 91, 101, 111, 121, 131,
        141, 151, 0, 10, 20, 30, 41, 51, 61, 71, 81, 91, 101, 111, 122, 132, 142, 152, 0, 10, 20,
        31, 41, 51, 61, 71, 82, 92, 102, 112, 122, 133, 143, 153, 0, 10, 21, 31, 41, 51, 62, 72,
        82, 92, 103, 113, 123, 133, 144, 154, 0, 10, 21, 31, 41, 52, 62, 72, 83, 93, 103, 114, 124,
        134, 145, 155, 0, 10, 21, 31, 42, 52, 62, 73, 83, 94, 104, 114, 125, 135, 146, 156, 0, 10,
        21, 31, 42, 52, 63, 73, 84, 94, 105, 115, 126, 136, 147, 157, 0, 11, 21, 32, 42, 53, 63,
        74, 84, 95, 105, 116, 126, 137, 147, 158, 0, 11, 21, 32, 42, 53, 64, 74, 85, 95, 106, 117,
        127, 138, 148, 159, 0, 11, 21, 32, 43, 53, 64, 75, 85, 96, 107, 117, 128, 139, 149, 160, 0,
        11, 21, 32, 43, 54, 64, 75, 86, 97, 107, 118, 129, 140, 150, 161, 0, 11, 22, 32, 43, 54,
        65, 76, 86, 97, 108, 119, 130, 140, 151, 162, 0, 11, 22, 33, 43, 54, 65, 76, 87, 98, 109,
        120, 130, 141, 152, 163, 0, 11, 22, 33, 44, 55, 66, 77, 87, 98, 109, 120, 131, 142, 153,
        164, 0, 11, 22, 33, 44, 55, 66, 77, 88, 99, 110, 121, 132, 143, 154, 165, 0, 11, 22, 33,
        44, 55, 66, 77, 89, 100, 111, 122, 133, 144, 155, 166, 0, 11, 22, 33, 45, 56, 67, 78, 89,
        100, 111, 122, 134, 145, 156, 167, 0, 11, 22, 34, 45, 56, 67, 78, 90, 101, 112, 123, 134,
        146, 157, 168, 0, 11, 23, 34, 45, 56, 68, 79, 90, 101, 113, 124, 135, 146, 158, 169, 0, 11,
        23, 34, 45, 57, 68, 79, 91, 102, 113, 125, 136, 147, 159, 170, 0, 11, 23, 34, 46, 57, 68,
        80, 91, 103, 114, 125, 137, 148, 160, 171, 0, 11, 23, 34, 46, 57, 69, 80, 92, 103, 115,
        126, 138, 149, 161, 172, 0, 12, 23, 35, 46, 58, 69, 81, 92, 104, 115, 127, 138, 150, 161,
        173, 0, 12, 23, 35, 46, 58, 70, 81, 93, 104, 116, 128, 139, 151, 162, 174, 0, 12, 23, 35,
        47, 58, 70, 82, 93, 105, 117, 128, 140, 152, 163, 175, 0, 12, 23, 35, 47, 59, 70, 82, 94,
        106, 117, 129, 141, 153, 164, 176, 0, 12, 24, 35, 47, 59, 71, 83, 94, 106, 118, 130, 142,
        153, 165, 177, 0, 12, 24, 36, 47, 59, 71, 83, 95, 107, 119, 131, 142, 154, 166, 178, 0, 12,
        24, 36, 48, 60, 72, 84, 95, 107, 119, 131, 143, 155, 167, 179, 0, 12, 24, 36, 48, 60, 72,
        84, 96, 108, 120, 132, 144, 156, 168, 180, 0, 12, 24, 36, 48, 60, 72, 84, 97, 109, 121,
        133, 145, 157, 169, 181, 0, 12, 24, 36, 49, 61, 73, 85, 97, 109, 121, 133, 146, 158, 170,
        182, 0, 12, 24, 37, 49, 61, 73, 85, 98, 110, 122, 134, 146, 159, 171, 183, 0, 12, 25, 37,
        49, 61, 74, 86, 98, 110, 123, 135, 147, 159, 172, 184, 0, 12, 25, 37, 49, 62, 74, 86, 99,
        111, 123, 136, 148, 160, 173, 185, 0, 12, 25, 37, 50, 62, 74, 87, 99, 112, 124, 136, 149,
        161, 174, 186, 0, 12, 25, 37, 50, 62, 75, 87, 100, 112, 125, 137, 150, 162, 175, 187, 0,
        13, 25, 38, 50, 63, 75, 88, 100, 113, 125, 138, 150, 163, 175, 188, 0, 13, 25, 38, 50, 63,
        76, 88, 101, 113, 126, 139, 151, 164, 176, 189, 0, 13, 25, 38, 51, 63, 76, 89, 101, 114,
        127, 139, 152, 165, 177, 190, 0, 13, 25, 38, 51, 64, 76, 89, 102, 115, 127, 140, 153, 166,
        178, 191, 0, 13, 26, 38, 51, 64, 77, 90, 102, 115, 128, 141, 154, 166, 179, 192, 0, 13, 26,
        39, 51, 64, 77, 90, 103, 116, 129, 142, 154, 167, 180, 193, 0, 13, 26, 39, 52, 65, 78, 91,
        103, 116, 129, 142, 155, 168, 181, 194, 0, 13, 26, 39, 52, 65, 78, 91, 104, 117, 130, 143,
        156, 169, 182, 195, 0, 13, 26, 39, 52, 65, 78, 91, 105, 118, 131, 144, 157, 170, 183, 196,
        0, 13, 26, 39, 53, 66, 79, 92, 105, 118, 131, 144, 158, 171, 184, 197, 0, 13, 26, 40, 53,
        66, 79, 92, 106, 119, 132, 145, 158, 172, 185, 198, 0, 13, 27, 40, 53, 66, 80, 93, 106,
        119, 133, 146, 159, 172, 186, 199, 0, 13, 27, 40, 53, 67, 80, 93, 107, 120, 133, 147, 160,
        173, 187, 200, 0, 13, 27, 40, 54, 67, 80, 94, 107, 121, 134, 147, 161, 174, 188, 201, 0,
        13, 27, 40, 54, 67, 81, 94, 108, 121, 135, 148, 162, 175, 189, 202, 0, 14, 27, 41, 54, 68,
        81, 95, 108, 122, 135, 149, 162, 176, 189, 203, 0, 14, 27, 41, 54, 68, 82, 95, 109, 122,
        136, 150, 163, 177, 190, 204, 0, 14, 27, 41, 55, 68, 82, 96, 109, 123, 137, 150, 164, 178,
        191, 205, 0, 14, 27, 41, 55, 69, 82, 96, 110, 124, 137, 151, 165, 179, 192, 206, 0, 14, 28,
        41, 55, 69, 83, 97, 110, 124, 138, 152, 166, 179, 193, 207, 0, 14, 28, 42, 55, 69, 83, 97,
        111, 125, 139, 153, 166, 180, 194, 208, 0, 14, 28, 42, 56, 70, 84, 98, 111, 125, 139, 153,
        167, 181, 195, 209, 0, 14, 28, 42, 56, 70, 84, 98, 112, 126, 140, 154, 168, 182, 196, 210,
        0, 14, 28, 42, 56, 70, 84, 98, 113, 127, 141, 155, 169, 183, 197, 211, 0, 14, 28, 42, 57,
        71, 85, 99, 113, 127, 141, 155, 170, 184, 198, 212, 0, 14, 28, 43, 57, 71, 85, 99, 114,
        128, 142, 156, 170, 185, 199, 213, 0, 14, 29, 43, 57, 71, 86, 100, 114, 128, 143, 157, 171,
        185, 200, 214, 0, 14, 29, 43, 57, 72, 86, 100, 115, 129, 143, 158, 172, 186, 201, 215, 0,
        14, 29, 43, 58, 72, 86, 101, 115, 130, 144, 158, 173, 187, 202, 216, 0, 14, 29, 43, 58, 72,
        87, 101, 116, 130, 145, 159, 174, 188, 203, 217, 0, 15, 29, 44, 58, 73, 87, 102, 116, 131,
        145, 160, 174, 189, 203, 218, 0, 15, 29, 44, 58, 73, 88, 102, 117, 131, 146, 161, 175, 190,
        204, 219, 0, 15, 29, 44, 59, 73, 88, 103, 117, 132, 147, 161, 176, 191, 205, 220, 0, 15,
        29, 44, 59, 74, 88, 103, 118, 133, 147, 162, 177, 192, 206, 221, 0, 15, 30, 44, 59, 74, 89,
        104, 118, 133, 148, 163, 178, 192, 207, 222, 0, 15, 30, 45, 59, 74, 89, 104, 119, 134, 149,
        164, 178, 193, 208, 223, 0, 15, 30, 45, 60, 75, 90, 105, 119, 134, 149, 164, 179, 194, 209,
        224, 0, 15, 30, 45, 60, 75, 90, 105, 120, 135, 150, 165, 180, 195, 210, 225, 0, 15, 30, 45,
        60, 75, 90, 105, 121, 136, 151, 166, 181, 196, 211, 226, 0, 15, 30, 45, 61, 76, 91, 106,
        121, 136, 151, 166, 182, 197, 212, 227, 0, 15, 30, 46, 61, 76, 91, 106, 122, 137, 152, 167,
        182, 198, 213, 228, 0, 15, 31, 46, 61, 76, 92, 107, 122, 137, 153, 168, 183, 198, 214, 229,
        0, 15, 31, 46, 61, 77, 92, 107, 123, 138, 153, 169, 184, 199, 215, 230, 0, 15, 31, 46, 62,
        77, 92, 108, 123, 139, 154, 169, 185, 200, 216, 231, 0, 15, 31, 46, 62, 77, 93, 108, 124,
        139, 155, 170, 186, 201, 217, 232, 0, 16, 31, 47, 62, 78, 93, 109, 124, 140, 155, 171, 186,
        202, 217, 233, 0, 16, 31, 47, 62, 78, 94, 109, 125, 140, 156, 172, 187, 203, 218, 234, 0,
        16, 31, 47, 63, 78, 94, 110, 125, 141, 157, 172, 188, 204, 219, 235, 0, 16, 31, 47, 63, 79,
        94, 110, 126, 142, 157, 173, 189, 205, 220, 236, 0, 16, 32, 47, 63, 79, 95, 111, 126, 142,
        158, 174, 190, 205, 221, 237, 0, 16, 32, 48, 63, 79, 95, 111, 127, 143, 159, 175, 190, 206,
        222, 238, 0, 16, 32, 48, 64, 80, 96, 112, 127, 143, 159, 175, 191, 207, 223, 239, 0, 16,
        32, 48, 64, 80, 96, 112, 128, 144, 160, 176, 192, 208, 224, 240, 0, 16, 32, 48, 64, 80, 96,
        112, 129, 145, 161, 177, 193, 209, 225, 241, 0, 16, 32, 48, 65, 81, 97, 113, 129, 145, 161,
        177, 194, 210, 226, 242, 0, 16, 32, 49, 65, 81, 97, 113, 130, 146, 162, 178, 194, 211, 227,
        243, 0, 16, 33, 49, 65, 81, 98, 114, 130, 146, 163, 179, 195, 211, 228, 244, 0, 16, 33, 49,
        65, 82, 98, 114, 131, 147, 163, 180, 196, 212, 229, 245, 0, 16, 33, 49, 66, 82, 98, 115,
        131, 148, 164, 180, 197, 213, 230, 246, 0, 16, 33, 49, 66, 82, 99, 115, 132, 148, 165, 181,
        198, 214, 231, 247, 0, 17, 33, 50, 66, 83, 99, 116, 132, 149, 165, 182, 198, 215, 231, 248,
        0, 17, 33, 50, 66, 83, 100, 116, 133, 149, 166, 183, 199, 216, 232, 249, 0, 17, 33, 50, 67,
        83, 100, 117, 133, 150, 167, 183, 200, 217, 233, 250, 0, 17, 33, 50, 67, 84, 100, 117, 134,
        151, 167, 184, 201, 218, 234, 251, 0, 17, 34, 50, 67, 84, 101, 118, 134, 151, 168, 185,
        202, 218, 235, 252, 0, 17, 34, 51, 67, 84, 101, 118, 135, 152, 169, 186, 202, 219, 236,
        253, 0, 17, 34, 51, 68, 85, 102, 119, 135, 152, 169, 186, 203, 220, 237, 254, 0, 17, 34,
        51, 68, 85, 102, 119, 136, 153, 170, 187, 204, 221, 238, 255,
    ];

    fn max_value() -> u8 {
        0b00001111
    }
    fn inv(self) -> Alpha {
        Alpha(Self::max_value() - self.0)
    }
    fn is_trans(self) -> bool {
        self.0 == 0
    }
    fn blend(self, orig: u8, new: u8) -> u8 {
        let o = self.inv().comp(orig);
        let n = self.comp(new);
        o + n
    }
    fn comp(self, v: u8) -> u8 {
        let alpha = usize::from(self.0);
        let id = 16 * usize::from(v) + alpha;
        Self::BLEND_TABLE[id]
    }
    pub fn plus(&mut self, u: u8) -> &mut Self {
        self.0 += u;
        if self.0 > Self::max_value() {
            self.0 = Self::max_value();
        }
        self
    }
    pub fn from_f32(f: f32) -> Alpha {
        let mut v = (f * 15.0).ceil() as u8;
        if v > Self::max_value() {
            v = Self::max_value();
        }
        Alpha(v)
    }
}

/// In altena16 Alpha Value has special meaning
/// 0b1011
/// the first 4 digit represents the Alpha value
/// the last 4 digits are used to customize collison attribute
///       1010
pub trait AltenaAlpha {
    const ALPHA_MASK: u8 = 0b11110000;
    const COLLISION_MASK: u8 = 0b00001111;
    fn alpha(&self) -> u8;
    fn collision_bits(&self) -> u8 {
        self.alpha() & Self::COLLISION_MASK
    }
    fn alpha_bits(&self) -> Alpha {
        Alpha((self.alpha() & Self::ALPHA_MASK) >> 4)
    }
    fn is_trans(&self) -> bool {
        self.alpha_bits().is_trans()
    }
}

impl<T: Primitive> AltenaAlpha for Rgba<T> {
    fn alpha(&self) -> u8 {
        match self[3].to_u8() {
            Some(a) => a,
            None => 0,
        }
    }
}

/// altena don't support alpha blending, so just rgb is enough
#[derive(Clone, Copy, Debug, Default)]
pub struct Color {
    pub r: u8,
    pub g: u8,
    pub b: u8,
}

impl Color {
    pub fn from_rgba<T: Primitive>(rgba: &Rgba<T>) -> Option<Color> {
        if rgba.is_trans() {
            return None;
        }
        Some(Color {
            r: rgba[0].to_u8()?,
            g: rgba[1].to_u8()?,
            b: rgba[2].to_u8()?,
        })
    }
    /// This implementation is for `altena` style image conversion
    /// e.g. restore image
    fn to_rgba<T: Primitive + From<u8>>(&self) -> Rgba<T> {
        let mut res = Rgba {
            data: [T::zero(); 4],
        };
        res[0] = convert::From::from(self.r);
        res[1] = convert::From::from(self.g);
        res[2] = convert::From::from(self.b);
        res
    }
    pub fn to_term(&self) -> TermRGB {
        TermRGB::RGB(self.r, self.g, self.b)
    }
    pub fn black() -> Self {
        Color { r: 0, g: 0, b: 0 }
    }
    pub fn white() -> Self {
        Color {
            r: 255,
            g: 255,
            b: 255,
        }
    }
    fn get(&self, id: usize) -> Option<u8> {
        match id {
            0 => Some(self.r),
            1 => Some(self.g),
            2 => Some(self.b),
            _ => None,
        }
    }
}

pub trait Blend {
    fn blend(&mut self, other: Color, alpha: Alpha);
}

impl Blend for Color {
    fn blend(&mut self, other: Color, alpha: Alpha) {
        self.r = alpha.blend(self.r, other.r);
        self.g = alpha.blend(self.g, other.g);
        self.b = alpha.blend(self.b, other.b);
    }
}

impl<T: Primitive> Blend for Rgba<T> {
    fn blend(&mut self, other: Color, alpha: Alpha) {
        (0..3)
            .try_for_each(|i| {
                let v = alpha.blend(self[i].to_u8()?, other.get(i)?);
                self[i] = T::from(v)?;
                Some(())
            })
            .unwrap();
    }
}

impl Blend for Dot {
    fn blend(&mut self, other: Color, alpha: Alpha) {
        match *self {
            Some(mut rgb) => {
                rgb.blend(other, alpha);
                *self = Some(rgb);
            }
            None => {
                let mut new = Color::default();
                new.r = alpha.inv().comp(other.r);
                new.g = alpha.inv().comp(other.g);
                new.b = alpha.inv().comp(other.b);
                *self = Some(new)
            }
        }
    }
}

pub type Dot = Option<Color>;

fn dot_fmt(d: &Dot, f: &mut fmt::Formatter) -> fmt::Result {
    match d {
        Some(rgb) => write!(f, "{}", Style::new().on(rgb.to_term()).paint("  ")),
        None => write!(f, "  "),
    }
}

pub fn dot_to_rgba<T: Primitive + From<u8>>(dot: &Dot) -> Rgba<T> {
    match *dot {
        Some(c) => c.to_rgba(),
        None => Rgba {
            data: [T::zero(); 4],
        },
    }
}
/// 16×16 tile used to draw objects.
#[derive(Clone)]
pub struct Tile {
    /// Buffer of tile data
    inner: [Dot; TILE_SIZE * TILE_SIZE],
}

impl fmt::Debug for Tile {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        writeln!(f, "tile: {{")?;
        for i in 0..TILE_SIZE {
            for j in 0..TILE_SIZE {
                let dot = self.get_xy(j, i).unwrap();
                dot_fmt(&dot, f)?;
            }
            writeln!(f, "")?;
        }
        writeln!(f, "}}")
    }
}

impl Default for Tile {
    fn default() -> Tile {
        Tile {
            inner: [None; TILE_SIZE * TILE_SIZE],
        }
    }
}

impl Tile {
    pub fn new(d: Dot) -> Tile {
        Tile {
            inner: [d; TILE_SIZE * TILE_SIZE],
        }
    }
}

impl Get2D for Tile {
    type Item = Dot;
    fn get_xy<T: ToPrimitive>(&self, x: T, y: T) -> Option<&Dot> {
        let (x, y) = (x.to_usize()?, y.to_usize()?);
        if TILE_SIZE <= x || TILE_SIZE <= y {
            return None;
        }
        Some(&self.inner[y * TILE_SIZE + x])
    }
}

impl GetMut2D for Tile {
    type Item = Dot;
    fn get_mut_xy<T: ToPrimitive>(&mut self, x: T, y: T) -> Option<&mut Dot> {
        let (x, y) = (x.to_usize()?, y.to_usize()?);
        if TILE_SIZE <= x || TILE_SIZE <= y {
            return None;
        }
        Some(&mut self.inner[y * TILE_SIZE + x])
    }
}
